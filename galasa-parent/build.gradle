plugins {
    id 'java'
    id 'biz.aQute.bnd.builder' version '5.3.0' apply false
    id 'dev.galasa.githash' version '0.15.0' apply false
    id 'jacoco'
    id 'maven-publish'
}

repositories {
    gradlePluginPortal()
    mavenCentral()
    maven {
        url "https://development.galasa.dev/main/maven-repo/obr/"
    }
    mavenLocal()
}

dependencies {
    // We need the swagger generator to generate API documentation from the openapi.yaml file
    // https://mvnrepository.com/artifact/io.swagger.codegen.v3/swagger-codegen-cli
    implementation 'io.swagger.codegen.v3:swagger-codegen-cli:3.0.41'
}

subprojects {
    apply plugin: 'jacoco'
    test {
        finalizedBy jacocoTestReport
    }
    jacocoTestReport {
        dependsOn test
    }
}

task downloadDependencies(type: Copy) {
    // Download the dependencies onto the local disk.
    from configurations.compileClasspath
    into 'build/dependencies'
    dependsOn configurations.compileClasspath
}

gradle.taskGraph.beforeTask { Task task ->
   task.ext.setProperty("startTime", new java.util.Date())
}

gradle.taskGraph.afterTask { Task task, TaskState state ->
    int secs = ( new java.util.Date().getTime() - task.ext.startTime.getTime() ) / 1000
    int mins = secs / 60

    int sec = secs - mins * 60
    println " -> took " + mins + ( ( 1 == mins ) ? " min " : " mins " ) + sec + ( ( 1 == sec ) ? " sec" : " secs" )
}

allprojects {
   tasks.withType(Javadoc) {
      options.addStringOption('Xdoclint:none', '-quiet')
   }
}


configurations {
    release_metadata
}

def overallManifestFilePath = "$buildDir/release.yaml"
def frameworkManifestFilePath = "$buildDir/framework-release.yaml"
def apiManifestFilePath = "$buildDir/api-release.yaml"

def overallHeader = """#
# Copyright contributors to the Galasa project 
#

# -----------------------------------------------------------
#
#                         WARNING
#
# This file is periodically re-generated from the contents of 
# the repository, so don't make changes here manually please.
# -----------------------------------------------------------


apiVersion: galasa.dev/v1alpha
kind: Release
metadata:
  name: galasa-release
"""

def frameworkHeader = """

framework:
  bundles:
"""

def apiHeader = """

api:
  bundles:
"""

def prepareGeneratedFile(path , header) {
    // Make sure the manifest file is clean, and exists.
    def overallManifestFile = new File(path)
    if (overallManifestFile.exists()){
        // File exists, delete it and create a new one.
        overallManifestFile.delete()
    }
    overallManifestFile.createNewFile()

    // Add the header to the manifest file
    overallManifestFile.append(header)
}

task buildReleaseYamlPrepare() {
    // During execution phase, make sure the file exists.
    doFirst{
        // Make sure the build directory exists.
        if ( !buildDir.exists() ) {
            buildDir.mkdirs()
        }
        
        prepareGeneratedFile(overallManifestFilePath,overallHeader)
        prepareGeneratedFile(frameworkManifestFilePath,frameworkHeader)
        prepareGeneratedFile(apiManifestFilePath,apiHeader)
    }
}

task buildReleaseYamlSubprojects() {
    dependsOn buildReleaseYamlPrepare

    subprojects {
        ext {
            // the property that should be overridden in suproject's build.gradle
            // Each sub-project will set the values...
            project_name = '' // The name of the bundle.
            include_in_obr = '' // Is the bundle included in the uber-obr ?
            include_in_mvp = '' 
            include_in_bom = '' 
            include_in_javadoc = '' // Is the component displayed to users on the public javadoc site ?
            include_in_isolated = '' // Is the component included in the bundles shipped as part of the isolated build ?
            include_in_codecoverage = ''
        }

        afterEvaluate {
            doLast {
                // Some projects don't have a version property... as they are parent projects mostly.
                if (version != 'unspecified') {

                    // Decide which manifest file we want to append to based on subcomponent.
                    def manifestFilePath
                    if ( project_name.startsWith('dev.galasa.framework.api') ) {
                        manifestFilePath = apiManifestFilePath
                    } else {
                        manifestFilePath = frameworkManifestFilePath
                    }

                    if (project_name == '') {
                        throw new Exception("Project has no name.")
                    }

                    def f = new File(manifestFilePath)
                    f.append("\n\n  - artifact: $project_name")
                    f.append("\n    version: $version")
                    if (include_in_obr != '') {
                        f.append("\n    obr:          $include_in_obr")
                    }
                    if (include_in_mvp != '') {
                        f.append("\n    mvp:          $include_in_mvp")
                    }
                    if (include_in_bom != '') {
                        f.append("\n    bom:          $include_in_bom")
                    }
                    if (include_in_javadoc != '') {
                        f.append("\n    javadoc:      $include_in_javadoc")
                    }
                    if (include_in_isolated != '') {
                        f.append("\n    isolated:     $include_in_isolated")
                    }
                    if (include_in_codecoverage != '') {
                        f.append("\n    codecoverage: $include_in_codecoverage")
                    }

                }
            }
        }
    }
}

task buildReleaseYamlFinalise() {
    dependsOn buildReleaseYamlSubprojects
    // At the end of days, add the framework and api sections to the overall manifest file.
    doLast{
        def toConcatenate = files(frameworkManifestFilePath, apiManifestFilePath)
        def overallManifestFile = new File(overallManifestFilePath)
        toConcatenate.each { f -> overallManifestFile.append(f.text)}
    }
}

// Build the release.yaml file
task buildReleaseYaml() {
    println 'Building the release.yaml file...'
    dependsOn buildReleaseYamlFinalise
}

def myReleaseYaml = artifacts.add('release_metadata', file(overallManifestFilePath)) {
    builtBy 'buildReleaseYaml'
}

// Publish the release.yaml as a maven artifact.
// Note: The maven co-ordinates are versioned using the version for this bundle.
publishing {
    publications {
        maven(MavenPublication) {
            artifact myReleaseYaml
            artifactId "dev.galasa.framework"
            groupId 'dev.galasa'
            version version
        }
    }
    repositories {
        maven {
            url  = "$targetMaven"
        
            if ("$targetMaven".startsWith('http')) {
                credentials {
                    username System.getenv('MAVENUSERNAME')
                    password System.getenv('MAVENPASSWORD')
                }
            }
        }
    }
}
